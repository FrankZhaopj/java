package com.zhaopj.java.proxy;

/**
 * 代理(Proxy)是一种设计模式
 * 	提供了对目标对象另外的访问方式;即通过代理对象访问目标对象.
 * 好处:可以在目标对象实现的基础上,增强额外的功能操作,即扩展目标对象的功能.
 * 这里使用到编程中的一个思想:
 * 	不要随意去修改别人已经写好的代码或者方法,如果需改修改,可以通过代理的方式来扩展该方法
 * 举个例子
 * 	假设我们想邀请一位明星,那么并不是直接连接明星,而是联系明星的经纪人,来达到同样的目的.
 * 	明星就是一个目标对象,他只要负责活动中的节目,而其他琐碎的事情就交给他的代理人(经纪人)来解决.
 * 自己理解：
 * 	所谓代理，我觉得就是第三方，不是第三者哈
 * 	我们要调用目标对象的方法，我们不直接使用目标对象去调，而是生成一个代理对象，这个对象也可以调用目标对象的方法
 * 		所谓静态代理：就是自己创建代理对象，并调用目标对象的方法
 * 		所谓JDK动态代理：就是由JDK通过反射机制动态生成代理对象，并调用目标对象的方法
 * 		所谓CGLIB动态代理：通过创建目标类的子类来创建代理类对象，使用asm框架转换字节码并生成新的类
 * 	生活中代理的例子也很多
 * 		【置业顾问】（代理对象）就是【业主】与【开发商】（目标对象）之间的代理；
 * 		【房屋中介】（代理对象）就是【租客】与【房东】（目标对象）之间的代理；
 */
public class Proxy {

	public static void main(String[] args) {
		
	}

}
